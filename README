PURPOSE

The purpose of this project is to create a custom bootloader for
the Commander X16 ATTiny861 based SMC.

Firmware data is transferred from the computer to the ATTiny over
I2C.

The code is under development, and not yet functional.


BUILD

The bootloader is made in AVR assembly for the AVRA assembler.

Build command: avra -o bootloader.hex main.asm


I2C API
 
-------+-----+----------------+-----------------------------------------------
Offset | R/W | Name           | Description
-------+-----+----------------+-----------------------------------------------
0x80   |  R  | Version        | Get bootloader API version, 1 byte
       |     |                | 01: Initial API version
       |     |                |
0x81   |  W  | Transmit       | Send a packet of firmware data. A packet
       |     |                | consists of 8 bytes to be written to flash
       |     |                | memory and 1 checksum byte. The checksum is the
       |     |                | two's complement of the sum of the previous
       |     |                | bytes in the packet, and the sum of a packet's
       |     |                | all 9 bytes should always be 0.
       |     |                |
0x82   |  R  | Commit         | Commit a packet to flash memory. The first
       |     |                | commit is written to flash memory address
       |     |                | 0x0000. The target address is moved forward 8
       |     |                | bytes on each successful commit.
       |     |                | Returns 1 byte. Possible return values are
       |     |                | 01: OK
       |     |                | 02: Packet size less than 9 bytes
       |     |                | 03: Packet size greater than 9 bytes
       |     |                | 04: Checksum error
       |     |                | 05: Address out of range
       |     |                |
0x83   |  W  | Close          | Clear remainder of flash memory with 0xFF 
       |     |                | and reboot the SMC.
       |     |                |
0x84   |  W  | Abort          | Abort and reboot the SMC. Data already written
       |     |                | to the flash memory can't be restored.
-------+-----+----------------+-------------------------------------------------
 
X16 CLIENT SOFTWARE FUNCTION
 
Stage 1 - Prepare
- Reserve an 8 kB RAM buffer, and clear it with value 0xff
- Read and parse HEX file into RAM buffer
- Cancel on HEX file errors:
  - Unsupported record type
  - Address out of range
  - Checksum error
 
Stage 2 - Transmit
- Transmit 8 bytes + 1 checksum byte
- Commit
- Retransmit if error response. Abort after 10 attempts.10
- Repeat until all data is transmitted
- Close