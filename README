PURPOSE

The purpose of this project is to create a custom bootloader for
the Commander X16 ATTiny861 based SMC.

Firmware data is transferred from the computer to the ATTiny over
I2C.

The code is under development, and not yet functional.


BUILD

The bootloader is made in AVR assembly for the AVRA assembler.

Build command: avra -o bootloader.hex main.asm


FUSE SETTINGS

Low fuse      0x61
High fuse     0xdf
Extended fuse 0xfe


VERSION ID

The bootloader version ID is stored in flash memory at the
start of the bootloader section.

-------------+-------+---------------------
Byte address | Value | Description
-------------+-------+---------------------
0x1E00       | 0x8a  | Magic number
             |       |
0x1E01       | ver   | API Version ID
             |       | 01: Initial version


I2C API
 
-------+-----+----------------+-----------------------------------------------
Offset | R/W | Name           | Description
-------+-----+----------------+-----------------------------------------------
0x80   |  W  | Transmit       | Send a data packet. A packet consists of 8 bytes
       |     |                | to be written to flash memory and 1 checksum
       |     |                | byte. The checksum byte is the two's complement
       |     |                | of the sum of the previous bytes in the packet.
       |     |                |
0x81   |  R  | Commit         | Commit a packet to flash memory. The first
       |     |                | commit is written to flash memory address
       |     |                | 0x0000. The target address is moved forward 8
       |     |                | bytes on each successful commit.
       |     |                | Returns 1 byte. Possible return values are
       |     |                | 00: OK, packet stored in RAM buffer
       |     |                | 01: OK, RAM buffer written to flash mem
       |     |                | 02: Packet size not 9 bytes
       |     |                | 04: Checksum error
       |     |                | 05: Overwriting bootloader section
       |     |                |
0x82   |  W  | Reboot         | Reboot the ATTiny. Before reboot any buffered
       |     |                | data is written to flash mem
-------+-----+----------------+-------------------------------------------------
 
X16 CLIENT SOFTWARE FUNCTION
 
Stage 1 - Prepare
- Check that a bootloader is present and that the client supports the bootloader API version
- Reserve an 8 kB RAM buffer, and clear it with value 0xff
- Read and parse HEX file into RAM buffer
- Cancel on HEX file errors:
  - Unsupported record type
  - Address out of range
  - Checksum error
 
Stage 2 - Transmit
- Transmit 8 bytes + 1 checksum byte
- Commit
- Retransmit if error response. Abort after 10 attempts.
- Repeat until all data is transmitted
- Flush
- Reboot